'use strict'<%= semiColon %>
const Enforcer = require('openapi-enforcer')<%= semiColon %>
const EnforcerMiddleware = require('openapi-enforcer-middleware')<%= semiColon %>
const EventEmitter = require('events')<%= semiColon %>
const express = require('express')<%= semiColon %>
const path = require('path')<%= semiColon %>

module.exports = server<%= semiColon %>

async function server (options) {
    // validate input
    if (arguments.length === 0) return Promise.reject(Error('Missing required "options" parameter'))<%= semiColon %>
    if (!options || typeof options !== 'object') return Promise.reject(Error('Required "options" parameter must be a non null object'))<%= semiColon %>
    if (!options.hasOwnProperty('oasDocumentPath')) return Promise.reject(Error('Missing required option: oasDocumentPath'))<%= semiColon %>

    // destructure options
    const { dependencies = {}, mockDependencies = {}, oasDocumentPath, port = 0, production = false } = options<%= semiColon %>

    const emitter = new EventEmitter()<%= semiColon %>
    const app = express()<%= semiColon %>
    const enforcer = EnforcerMiddleware(oasDocumentPath)<%= semiColon %>
    const loadErrorState = {}<%= semiColon %>

    // wait for middleware to load
    await enforcer.promise<%= semiColon %>

    // check for explicit mock request
    await enforcer.mocks(path.resolve(__dirname, '../mocks'), false, mockDependencies)
        .catch(loadErrorHandler(production, true, loadErrorState))<%= semiColon %>

    // call defined operation handlers
    await enforcer.controllers(path.resolve(__dirname, '../controllers'), dependencies)
        .catch(loadErrorHandler(production, false, loadErrorState))<%= semiColon %>

    // produce fallback mock responses in development
    if (!production) {
        await enforcer.mocks(path.resolve(__dirname, '../mocks'), true, mockDependencies)
            .catch(loadErrorHandler(production, true, loadErrorState))<%= semiColon %>
    }

    // tell express to run the open api enforcer middleware
    app.use(enforcer.middleware())<%= semiColon %>

    // add error handling middleware
    app.use((err, req, res, next) => {
        if (production) {
            res.sendStatus(500)<%= semiColon %>
        } else {
            res.status(500)<%= semiColon %>
            res.set('content-type', 'text/plain')<%= semiColon %>
            res.send(err.stack + '\n\nNote that this error message will only reach the client while configuration is not set to production')<%= semiColon %>
        }
    })<%= semiColon %>

    return new Promise(async (resolve, reject) => {
        // start the server listening
        const server = app.listen(port, err => {
            if (err) return reject(err)<%= semiColon %>

            // resolve to an object
            const result = {
                close () {
                    this.end()<%= semiColon %>
                },
                end () {
                    server.close()<%= semiColon %>
                    emitter.emit('end')<%= semiColon %>
                },
                on (eventType, callback) {
                    emitter.on(eventType, callback)<%= semiColon %>
                },
                port: server.address().port
            }<%= semiColon %>
            resolve(result)<%= semiColon %>
        })<%= semiColon %>
    })<%= semiColon %>
}<%= semiColon %>

function loadErrorHandler (production, isMock, errState) {
    return function (err) {
        if (production && !isMock) {
            throw err<%= semiColon %>
        } else if (isMock && !errState.mockErrorHandled) {
            errState.mockErrorHandled = true<%= semiColon %>
            const lines = err.message.split(/\r\n|\r|\n/)<%= semiColon %>
            lines[0] += ' so these mocks will be auto generated:'<%= semiColon %>
            console.log('\n' + lines.join('\n'))<%= semiColon %>
        } else if (!isMock) {
            const lines = err.message.split(/\r\n|\r|\n/)<%= semiColon %>
            lines[0] += '. You will want to implement these for production:'<%= semiColon %>
            console.error('\n' + lines.join('\n'))<%= semiColon %>
        }
    }
}
